package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key


package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
package org.lwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

public class FileUtils {
	
	
	public static void main(String[] args) throws IOException {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		File file = new File(path+"test01.txt");
		OutputStream out = new FileOutputStream(file);
		//byte[] bytes = new byte[1024];
		out.write("hello".getBytes());
		out.flush();
		out.close();
		System.out.println(path);
		
		
		
	}
	
	/**
	 * 
	 * 分割文件
	 * 
	 * 
	 * @throws IOException
	 */
	public static void splitDemo(byte[] tempByte, File sourceFile)throws IOException
    {
		String path = FileUtils.class.getClassLoader().getResource("").getPath();
		path = path.substring(1, path.length());
		/*****************************************/
        FileInputStream fis = new FileInputStream(sourceFile);
        FileOutputStream fos = null;	//要在循环内部创建FileOutputStream对象
        byte[] buf = new byte[56];	//将文件分割成1M大小的碎片
        int len,count = 0;
        
        while((len=fis.read(buf))!=-1)
        {
        	
            fos = new FileOutputStream(path+(count++)+".part");
            fos.write(buf,0,len);
            fos.flush();
            fos.close();
        }
        fis.close();
    }
	
	public static void sequenceDemo()throws IOException
    {
        FileInputStream fis = null;
        FileOutputStream fos = new FileOutputStream("2.avi");
        ArrayList<FileInputStream> al = new ArrayList<FileInputStream>();//Vector效率低 
        int count = 0;
        File dir = new File("split");//利用File遍历文件夹下的文件
        File[] files = dir.listFiles();
        for(int x=0;x<files.length;x++)
        {
            al.add(new FileInputStream(files[x]));
        }
        final Iterator<FileInputStream> it = al.iterator();//ArrayList本身没有枚举方法，通过迭代器来实现
        Enumeration<FileInputStream>  en= new Enumeration<FileInputStream>()//匿名内部类，复写枚举接口下的两个方法
        {
            public boolean hasMoreElements(){
                return it.hasNext();
            }
            public FileInputStream nextElement()
            {
                return it.next();
            }
            
        };
        SequenceInputStream sis = new SequenceInputStream(en);
        byte[] buf = new byte[1024*1024];	//定义1M的缓存区
        while((count=sis.read(buf))!=-1)
        {
            fos.write(buf,0,count);
        }
        sis.close();
        fos.close();
    }
	
	
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>www.lwt.org</groupId>
  <artifactId>rabittmq</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>rabittmq</name>
  
  <dependencies>
    <dependency>
	    <groupId>com.rabbitmq</groupId>
	    <artifactId>amqp-client</artifactId>
	    <version>4.1.0</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j.adapters/slf4j-impl -->
	<dependency>
	    <groupId>org.apache.logging.log4j.adapters</groupId>
	    <artifactId>slf4j-impl</artifactId>
	    <version>2.0-beta2</version>
	    <scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>
	
    
  </dependencies>
  
</project>package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import org.lwt.tools.TestTools;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer2 {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = TestTools.getMsg().getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
package org.lwt.producer;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.Queue;

/**
 * 生产者类
 * @author lwt27
 *
 */

public class Producer {
	//private final static String QUEUE_NAME = "hello";
	public static void main(String[] args) throws Exception {
		//创建链接工厂
		ConnectionFactory factory = new ConnectionFactory();
		// 设置用户名密码
		factory.setUsername("yduser");
		factory.setPassword("yd@user");
		factory.setVirtualHost("ydkpbmp");
		// 设置rabbitMq服务器地址
		factory.setHost("10.10.10.14");
		// 建立到服务器的链接
		Connection connection = factory.newConnection();
		//获得信道
		Channel channel = connection.createChannel();
		
		//声明交换器
		String exchangeName = "myexchanges01";
		channel.exchangeDeclare(exchangeName, "direct", true);
		//声明routing-key
		String routingKey = "myroutingkey01";
		//发布消息
		byte[] messageBodyBytes = "发布消息--Helloworold".getBytes("utf-8");
		channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);
		
		/*Queue.DeclareOk success = channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println("队列"+success.getQueue());
		System.out.println("客户端数量"+success.getConsumerCount());
		System.out.println("消息数"+success.getMessageCount());
		String message = "Hello World!";
		channel.basicPublish("", QUEUE_NAME, null, message.getBytes());*/
		System.out.println(" [producer] Sent '" + messageBodyBytes.toString() + "'");
		
		channel.close();
		connection.close();
	}
	
	
	
	
}
#spring.rabbitmq.host=192.168.1.3
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=alice
#spring.rabbitmq.password=123456

spring.rabbitmq.host=10.10.10.14
spring.rabbitmq.virtual-host=ydkpbmp
spring.rabbitmq.port=5672
spring.rabbitmq.username=yduser
spring.rabbitmq.password=yd@user
#exchange name
mq.config.exchange=log.direct
#queue name
mq.config.queue.info=log.info
#routing key
mq.config.queue.info.routing.key=log.info.routing.key

mq.config.queue.error=log.error
mq.config.queue.routing.key=log.error.routing.key




